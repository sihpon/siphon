// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: siphon/v1/service.proto

package greetv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/siphon/siphon/gen/siphon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SiphonServiceName is the fully-qualified name of the SiphonService service.
	SiphonServiceName = "siphon.v1.SiphonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SiphonServiceEchoProcedure is the fully-qualified name of the SiphonService's Echo RPC.
	SiphonServiceEchoProcedure = "/siphon.v1.SiphonService/Echo"
	// SiphonServiceHealthProcedure is the fully-qualified name of the SiphonService's Health RPC.
	SiphonServiceHealthProcedure = "/siphon.v1.SiphonService/Health"
)

// SiphonServiceClient is a client for the siphon.v1.SiphonService service.
type SiphonServiceClient interface {
	Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error)
}

// NewSiphonServiceClient constructs a client for the siphon.v1.SiphonService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSiphonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SiphonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	siphonServiceMethods := v1.File_siphon_v1_service_proto.Services().ByName("SiphonService").Methods()
	return &siphonServiceClient{
		echo: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+SiphonServiceEchoProcedure,
			connect.WithSchema(siphonServiceMethods.ByName("Echo")),
			connect.WithClientOptions(opts...),
		),
		health: connect.NewClient[v1.HealthRequest, v1.HealthResponse](
			httpClient,
			baseURL+SiphonServiceHealthProcedure,
			connect.WithSchema(siphonServiceMethods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
	}
}

// siphonServiceClient implements SiphonServiceClient.
type siphonServiceClient struct {
	echo   *connect.Client[v1.EchoRequest, v1.EchoResponse]
	health *connect.Client[v1.HealthRequest, v1.HealthResponse]
}

// Echo calls siphon.v1.SiphonService.Echo.
func (c *siphonServiceClient) Echo(ctx context.Context, req *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// Health calls siphon.v1.SiphonService.Health.
func (c *siphonServiceClient) Health(ctx context.Context, req *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// SiphonServiceHandler is an implementation of the siphon.v1.SiphonService service.
type SiphonServiceHandler interface {
	Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error)
}

// NewSiphonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSiphonServiceHandler(svc SiphonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	siphonServiceMethods := v1.File_siphon_v1_service_proto.Services().ByName("SiphonService").Methods()
	siphonServiceEchoHandler := connect.NewUnaryHandler(
		SiphonServiceEchoProcedure,
		svc.Echo,
		connect.WithSchema(siphonServiceMethods.ByName("Echo")),
		connect.WithHandlerOptions(opts...),
	)
	siphonServiceHealthHandler := connect.NewUnaryHandler(
		SiphonServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(siphonServiceMethods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	return "/siphon.v1.SiphonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SiphonServiceEchoProcedure:
			siphonServiceEchoHandler.ServeHTTP(w, r)
		case SiphonServiceHealthProcedure:
			siphonServiceHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSiphonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSiphonServiceHandler struct{}

func (UnimplementedSiphonServiceHandler) Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("siphon.v1.SiphonService.Echo is not implemented"))
}

func (UnimplementedSiphonServiceHandler) Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("siphon.v1.SiphonService.Health is not implemented"))
}
