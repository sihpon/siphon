// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workload/v1/workload.proto

package workloadv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/siphon/siphon/generated/workload/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkloadServiceName is the fully-qualified name of the WorkloadService service.
	WorkloadServiceName = "workload.v1.WorkloadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkloadServiceListProcedure is the fully-qualified name of the WorkloadService's List RPC.
	WorkloadServiceListProcedure = "/workload.v1.WorkloadService/List"
	// WorkloadServiceGetProcedure is the fully-qualified name of the WorkloadService's Get RPC.
	WorkloadServiceGetProcedure = "/workload.v1.WorkloadService/Get"
	// WorkloadServiceCreateProcedure is the fully-qualified name of the WorkloadService's Create RPC.
	WorkloadServiceCreateProcedure = "/workload.v1.WorkloadService/Create"
	// WorkloadServiceUpdateProcedure is the fully-qualified name of the WorkloadService's Update RPC.
	WorkloadServiceUpdateProcedure = "/workload.v1.WorkloadService/Update"
	// WorkloadServiceDeleteProcedure is the fully-qualified name of the WorkloadService's Delete RPC.
	WorkloadServiceDeleteProcedure = "/workload.v1.WorkloadService/Delete"
)

// WorkloadServiceClient is a client for the workload.v1.WorkloadService service.
type WorkloadServiceClient interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewWorkloadServiceClient constructs a client for the workload.v1.WorkloadService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkloadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkloadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workloadServiceMethods := v1.File_workload_v1_workload_proto.Services().ByName("WorkloadService").Methods()
	return &workloadServiceClient{
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+WorkloadServiceListProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+WorkloadServiceGetProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+WorkloadServiceCreateProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+WorkloadServiceUpdateProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+WorkloadServiceDeleteProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workloadServiceClient implements WorkloadServiceClient.
type workloadServiceClient struct {
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// List calls workload.v1.WorkloadService.List.
func (c *workloadServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls workload.v1.WorkloadService.Get.
func (c *workloadServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls workload.v1.WorkloadService.Create.
func (c *workloadServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls workload.v1.WorkloadService.Update.
func (c *workloadServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls workload.v1.WorkloadService.Delete.
func (c *workloadServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// WorkloadServiceHandler is an implementation of the workload.v1.WorkloadService service.
type WorkloadServiceHandler interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewWorkloadServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkloadServiceHandler(svc WorkloadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workloadServiceMethods := v1.File_workload_v1_workload_proto.Services().ByName("WorkloadService").Methods()
	workloadServiceListHandler := connect.NewUnaryHandler(
		WorkloadServiceListProcedure,
		svc.List,
		connect.WithSchema(workloadServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceGetHandler := connect.NewUnaryHandler(
		WorkloadServiceGetProcedure,
		svc.Get,
		connect.WithSchema(workloadServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceCreateHandler := connect.NewUnaryHandler(
		WorkloadServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(workloadServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceUpdateHandler := connect.NewUnaryHandler(
		WorkloadServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(workloadServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceDeleteHandler := connect.NewUnaryHandler(
		WorkloadServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(workloadServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workload.v1.WorkloadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkloadServiceListProcedure:
			workloadServiceListHandler.ServeHTTP(w, r)
		case WorkloadServiceGetProcedure:
			workloadServiceGetHandler.ServeHTTP(w, r)
		case WorkloadServiceCreateProcedure:
			workloadServiceCreateHandler.ServeHTTP(w, r)
		case WorkloadServiceUpdateProcedure:
			workloadServiceUpdateHandler.ServeHTTP(w, r)
		case WorkloadServiceDeleteProcedure:
			workloadServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkloadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkloadServiceHandler struct{}

func (UnimplementedWorkloadServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workload.v1.WorkloadService.List is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workload.v1.WorkloadService.Get is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workload.v1.WorkloadService.Create is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workload.v1.WorkloadService.Update is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workload.v1.WorkloadService.Delete is not implemented"))
}
